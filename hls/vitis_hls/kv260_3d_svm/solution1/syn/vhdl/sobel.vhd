-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_sobel,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.298875,HLS_SYN_LAT=921628,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=4192,HLS_SYN_LUT=5673,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_3FD3212D77318FC5 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000010010110101110111001100011000111111000101";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv64_3FC26E978D4FDF3B : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000010011011101001011110001101010011111101111100111011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011111111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv16_50 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001010000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_FF00 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal tmp_nbreadreq_fu_228_p9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal tmp_reg_1202 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_1202_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1202_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_1_reg_1206 : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_1_reg_1206_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211 : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter19_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter20_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter21_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter22_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter23_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter24_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_2_reg_1211_pp0_iter25_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal pixel_in_3_reg_1216 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_3_reg_1216_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_4_reg_1223_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_5_reg_1229_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_in_6_reg_1234_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln113_fu_446_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_reg_1239 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_reg_1239_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_reg_1239_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_reg_1239_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln113_reg_1239_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_1254 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv3_i_reg_1259 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_reg_1269 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul4_i_reg_1274 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv6_i_reg_1279 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i_reg_1284 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul7_i_reg_1289 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add8_i_reg_1294 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_addr_reg_1299 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_cmp45_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp45_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_1_addr_reg_1310 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_cmp39_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp39_reg_1316 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_l1_1_addr_reg_1321 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_l1_1_addr_reg_1321_pp0_iter20_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_l1_1_addr_reg_1321_pp0_iter21_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_l1_1_addr_reg_1321_pp0_iter22_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_l1_1_addr_reg_1321_pp0_iter23_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_l1_1_addr_reg_1321_pp0_iter24_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_l1_1_addr_reg_1321_pp0_iter25_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_cmp_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1327_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_reg_1332_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_reg_1337_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln57_2_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_2_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_5_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_5_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sqrt_fixed_32_32_s_fu_338_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_reg_1359 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_exit_pp0_iter26_stage0 : STD_LOGIC;
    signal line_buffer_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_ce0 : STD_LOGIC;
    signal line_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_ce1 : STD_LOGIC;
    signal line_buffer_0_we1 : STD_LOGIC;
    signal line_buffer_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_ce0 : STD_LOGIC;
    signal line_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_ce1 : STD_LOGIC;
    signal line_buffer_1_we1 : STD_LOGIC;
    signal line_buffer_l1_1_ce0 : STD_LOGIC;
    signal line_buffer_l1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_l1_1_ce1 : STD_LOGIC;
    signal line_buffer_l1_1_we1 : STD_LOGIC;
    signal grp_sqrt_fixed_32_32_s_fu_338_x : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sqrt_fixed_32_32_s_fu_338_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call89 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call89 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call89 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call89 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call89 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call89 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call89 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call89 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call89 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call89 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call89 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call89 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call89 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call89 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call89 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call89 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call89 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call89 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18_ignore_call89 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19_ignore_call89 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20_ignore_call89 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21_ignore_call89 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22_ignore_call89 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23_ignore_call89 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24_ignore_call89 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25_ignore_call89 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26_ignore_call89 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27_ignore_call89 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp217 : BOOLEAN;
    signal zext_ln116_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg42_fu_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg41_fu_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select40_fu_607_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg36_fu_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg35_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_729_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_164 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_reg_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_fu_1065_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_67_fu_184 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_68_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_fu_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal reuse_select_fu_932_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_fu_196 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_69_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select46_fu_597_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_fu_204 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln65_fu_615_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_71_fu_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal q_1_fu_212 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_369_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln14_1_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_536_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_633_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_637_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_51_fu_623_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln341_fu_651_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln341_fu_655_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1364_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1364_fu_675_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_679_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1340_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln68_fu_647_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1340_fu_691_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_695_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_46_fu_707_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_701_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln671_fu_715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_719_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln57_fu_748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_1_fu_760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_fu_766_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln57_1_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_1_fu_778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln57_2_fu_796_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_3_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_2_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln57_3_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln57_4_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_3_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln122_1_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln122_fu_864_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln82_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_1_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln82_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln82_1_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_947_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln132_2_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_3_fu_963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln132_1_fu_969_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal supressed_fu_921_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln132_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln132_fu_975_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_1_fu_983_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_out_2_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln130_fu_997_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_1013_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln141_fu_1005_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln141_1_fu_1027_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln141_fu_1021_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal pixel_out_data_V_fu_1035_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln140_fu_1043_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_1_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_1058_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_ce : STD_LOGIC;
    signal grp_fu_346_ce : STD_LOGIC;
    signal grp_fu_350_ce : STD_LOGIC;
    signal grp_fu_354_ce : STD_LOGIC;
    signal grp_fu_359_ce : STD_LOGIC;
    signal grp_fu_364_ce : STD_LOGIC;
    signal grp_fu_369_ce : STD_LOGIC;
    signal grp_fu_372_ce : STD_LOGIC;
    signal grp_fu_375_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_TVALID_int_regslice : STD_LOGIC;
    signal in_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_TVALID_int_regslice : STD_LOGIC;
    signal out_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_1080 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component sobel_sqrt_fixed_32_32_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component sobel_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_uitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sobel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_line_buffer_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_line_buffer_l1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sobel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component sobel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    line_buffer_0_U : component sobel_line_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_0_address0,
        ce0 => line_buffer_0_ce0,
        q0 => line_buffer_0_q0,
        address1 => line_buffer_0_addr_reg_1299,
        ce1 => line_buffer_0_ce1,
        we1 => line_buffer_0_we1,
        d1 => reuse_select40_fu_607_p3);

    line_buffer_1_U : component sobel_line_buffer_0
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_1_address0,
        ce0 => line_buffer_1_ce0,
        q0 => line_buffer_1_q0,
        address1 => line_buffer_1_addr_reg_1310,
        ce1 => line_buffer_1_ce1,
        we1 => line_buffer_1_we1,
        d1 => val_fu_729_p3);

    line_buffer_l1_1_U : component sobel_line_buffer_l1_1
    generic map (
        DataWidth => 16,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_l1_1_addr_reg_1321_pp0_iter24_reg,
        ce0 => line_buffer_l1_1_ce0,
        q0 => line_buffer_l1_1_q0,
        address1 => line_buffer_l1_1_addr_reg_1321_pp0_iter25_reg,
        ce1 => line_buffer_l1_1_ce1,
        we1 => line_buffer_l1_1_we1,
        d1 => p_Val2_s_reg_1359);

    grp_sqrt_fixed_32_32_s_fu_338 : component sobel_sqrt_fixed_32_32_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        x => grp_sqrt_fixed_32_32_s_fu_338_x,
        ap_return => grp_sqrt_fixed_32_32_s_fu_338_ap_return,
        ap_ce => grp_sqrt_fixed_32_32_s_fu_338_ap_ce);

    control_s_axi_U : component sobel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0);

    fptrunc_64ns_32_2_no_dsp_1_U2 : component sobel_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add8_i_reg_1294,
        ce => grp_fu_343_ce,
        dout => grp_fu_343_p1);

    dadd_64ns_64ns_64_5_full_dsp_1_U3 : component sobel_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i_reg_1269,
        din1 => mul4_i_reg_1274,
        ce => grp_fu_346_ce,
        dout => grp_fu_346_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U4 : component sobel_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add_i_reg_1284,
        din1 => mul7_i_reg_1289,
        ce => grp_fu_350_ce,
        dout => grp_fu_350_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U5 : component sobel_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_i_reg_1254,
        din1 => ap_const_lv64_3FD3212D77318FC5,
        ce => grp_fu_354_ce,
        dout => grp_fu_354_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U6 : component sobel_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv3_i_reg_1259,
        din1 => ap_const_lv64_3FE2C8B439581062,
        ce => grp_fu_359_ce,
        dout => grp_fu_359_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U7 : component sobel_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv6_i_reg_1279,
        din1 => ap_const_lv64_3FC26E978D4FDF3B,
        ce => grp_fu_364_ce,
        dout => grp_fu_364_p2);

    uitodp_32ns_64_4_no_dsp_1_U8 : component sobel_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_369_p0,
        ce => grp_fu_369_ce,
        dout => grp_fu_369_p1);

    uitodp_32ns_64_4_no_dsp_1_U9 : component sobel_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_372_p0,
        ce => grp_fu_372_ce,
        dout => grp_fu_372_p1);

    uitodp_32ns_64_4_no_dsp_1_U10 : component sobel_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_375_p0,
        ce => grp_fu_375_ce,
        dout => grp_fu_375_p1);

    mul_32s_32s_32_1_1_U11 : component sobel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => sub_ln57_2_reg_1342,
        din1 => sub_ln57_2_reg_1342,
        dout => mul_ln122_fu_864_p2);

    mul_32s_32s_32_1_1_U12 : component sobel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => sub_ln57_5_reg_1348,
        din1 => sub_ln57_5_reg_1348,
        dout => mul_ln122_1_fu_868_p2);

    flow_control_loop_pipe_U : component sobel_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);

    regslice_both_in_V_data_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_data_V_U_ack_in,
        data_out => in_r_TDATA_int_regslice,
        vld_out => in_r_TVALID_int_regslice,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_data_V_U_apdone_blk);

    regslice_both_in_V_keep_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TKEEP,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_keep_V_U_ack_in,
        data_out => in_r_TKEEP_int_regslice,
        vld_out => regslice_both_in_V_keep_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_keep_V_U_apdone_blk);

    regslice_both_in_V_strb_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TSTRB,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_strb_V_U_ack_in,
        data_out => in_r_TSTRB_int_regslice,
        vld_out => regslice_both_in_V_strb_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_strb_V_U_apdone_blk);

    regslice_both_in_V_user_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TUSER,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_user_V_U_ack_in,
        data_out => in_r_TUSER_int_regslice,
        vld_out => regslice_both_in_V_user_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_user_V_U_apdone_blk);

    regslice_both_in_V_last_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_last_V_U_ack_in,
        data_out => in_r_TLAST_int_regslice,
        vld_out => regslice_both_in_V_last_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_last_V_U_apdone_blk);

    regslice_both_in_V_id_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TID,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_id_V_U_ack_in,
        data_out => in_r_TID_int_regslice,
        vld_out => regslice_both_in_V_id_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_id_V_U_apdone_blk);

    regslice_both_in_V_dest_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDEST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_V_dest_V_U_ack_in,
        data_out => in_r_TDEST_int_regslice,
        vld_out => regslice_both_in_V_dest_V_U_vld_out,
        ack_out => in_r_TREADY_int_regslice,
        apdone_blk => regslice_both_in_V_dest_V_U_apdone_blk);

    regslice_both_out_V_data_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int_regslice,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => out_r_TREADY_int_regslice,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_V_data_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_data_V_U_apdone_blk);

    regslice_both_out_V_keep_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_in_1_reg_1206_pp0_iter25_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_keep_V_U_ack_in_dummy,
        data_out => out_r_TKEEP,
        vld_out => regslice_both_out_V_keep_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_keep_V_U_apdone_blk);

    regslice_both_out_V_strb_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_in_2_reg_1211_pp0_iter25_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_strb_V_U_ack_in_dummy,
        data_out => out_r_TSTRB,
        vld_out => regslice_both_out_V_strb_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_strb_V_U_apdone_blk);

    regslice_both_out_V_user_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_in_3_reg_1216_pp0_iter25_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_user_V_U_ack_in_dummy,
        data_out => out_r_TUSER,
        vld_out => regslice_both_out_V_user_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_user_V_U_apdone_blk);

    regslice_both_out_V_last_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_in_4_reg_1223_pp0_iter25_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_V_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_last_V_U_apdone_blk);

    regslice_both_out_V_id_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_in_5_reg_1229_pp0_iter25_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_id_V_U_ack_in_dummy,
        data_out => out_r_TID,
        vld_out => regslice_both_out_V_id_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_id_V_U_apdone_blk);

    regslice_both_out_V_dest_V_U : component sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pixel_in_6_reg_1234_pp0_iter25_reg,
        vld_in => out_r_TVALID_int_regslice,
        ack_in => regslice_both_out_V_dest_V_U_ack_in_dummy,
        data_out => out_r_TDEST,
        vld_out => regslice_both_out_V_dest_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter26_stage0)) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    i_1_fu_176 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter18_reg = ap_const_lv1_1))) then 
                    i_1_fu_176 <= i_2_fu_564_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    j_fu_172 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1))) then 
                    j_fu_172 <= j_3_fu_1065_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg36_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    reuse_addr_reg36_fu_156 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter18_reg = ap_const_lv1_1))) then 
                    reuse_addr_reg36_fu_156 <= zext_ln116_fu_487_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg42_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    reuse_addr_reg42_fu_148 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter18_reg = ap_const_lv1_1))) then 
                    reuse_addr_reg42_fu_148 <= zext_ln116_fu_487_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    reuse_addr_reg_fu_164 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter18_reg = ap_const_lv1_1))) then 
                    reuse_addr_reg_fu_164 <= zext_ln116_fu_487_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg35_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    reuse_reg35_fu_160 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter19_reg = ap_const_lv1_1))) then 
                    reuse_reg35_fu_160 <= val_fu_729_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg41_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    reuse_reg41_fu_152 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter19_reg = ap_const_lv1_1))) then 
                    reuse_reg41_fu_152 <= reuse_select40_fu_607_p3;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_1080)) then 
                    reuse_reg_fu_168 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1))) then 
                    reuse_reg_fu_168 <= p_Val2_s_reg_1359;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter17_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add8_i_reg_1294 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_i_reg_1284 <= grp_fu_346_p2;
                mul7_i_reg_1289 <= grp_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                addr_cmp39_reg_1316 <= addr_cmp39_fu_506_p2;
                addr_cmp45_reg_1305 <= addr_cmp45_fu_497_p2;
                addr_cmp_reg_1327 <= addr_cmp_fu_525_p2;
                icmp_ln132_1_reg_1337 <= icmp_ln132_1_fu_552_p2;
                icmp_ln132_reg_1332 <= icmp_ln132_fu_546_p2;
                line_buffer_0_addr_reg_1299 <= zext_ln116_fu_487_p1(11 - 1 downto 0);
                line_buffer_1_addr_reg_1310 <= zext_ln116_fu_487_p1(11 - 1 downto 0);
                line_buffer_l1_1_addr_reg_1321 <= zext_ln116_fu_487_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                addr_cmp_reg_1327_pp0_iter20_reg <= addr_cmp_reg_1327;
                addr_cmp_reg_1327_pp0_iter21_reg <= addr_cmp_reg_1327_pp0_iter20_reg;
                addr_cmp_reg_1327_pp0_iter22_reg <= addr_cmp_reg_1327_pp0_iter21_reg;
                addr_cmp_reg_1327_pp0_iter23_reg <= addr_cmp_reg_1327_pp0_iter22_reg;
                addr_cmp_reg_1327_pp0_iter24_reg <= addr_cmp_reg_1327_pp0_iter23_reg;
                addr_cmp_reg_1327_pp0_iter25_reg <= addr_cmp_reg_1327_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln132_1_reg_1337_pp0_iter20_reg <= icmp_ln132_1_reg_1337;
                icmp_ln132_1_reg_1337_pp0_iter21_reg <= icmp_ln132_1_reg_1337_pp0_iter20_reg;
                icmp_ln132_1_reg_1337_pp0_iter22_reg <= icmp_ln132_1_reg_1337_pp0_iter21_reg;
                icmp_ln132_1_reg_1337_pp0_iter23_reg <= icmp_ln132_1_reg_1337_pp0_iter22_reg;
                icmp_ln132_1_reg_1337_pp0_iter24_reg <= icmp_ln132_1_reg_1337_pp0_iter23_reg;
                icmp_ln132_1_reg_1337_pp0_iter25_reg <= icmp_ln132_1_reg_1337_pp0_iter24_reg;
                icmp_ln132_reg_1332_pp0_iter20_reg <= icmp_ln132_reg_1332;
                icmp_ln132_reg_1332_pp0_iter21_reg <= icmp_ln132_reg_1332_pp0_iter20_reg;
                icmp_ln132_reg_1332_pp0_iter22_reg <= icmp_ln132_reg_1332_pp0_iter21_reg;
                icmp_ln132_reg_1332_pp0_iter23_reg <= icmp_ln132_reg_1332_pp0_iter22_reg;
                icmp_ln132_reg_1332_pp0_iter24_reg <= icmp_ln132_reg_1332_pp0_iter23_reg;
                icmp_ln132_reg_1332_pp0_iter25_reg <= icmp_ln132_reg_1332_pp0_iter24_reg;
                line_buffer_l1_1_addr_reg_1321_pp0_iter20_reg <= line_buffer_l1_1_addr_reg_1321;
                line_buffer_l1_1_addr_reg_1321_pp0_iter21_reg <= line_buffer_l1_1_addr_reg_1321_pp0_iter20_reg;
                line_buffer_l1_1_addr_reg_1321_pp0_iter22_reg <= line_buffer_l1_1_addr_reg_1321_pp0_iter21_reg;
                line_buffer_l1_1_addr_reg_1321_pp0_iter23_reg <= line_buffer_l1_1_addr_reg_1321_pp0_iter22_reg;
                line_buffer_l1_1_addr_reg_1321_pp0_iter24_reg <= line_buffer_l1_1_addr_reg_1321_pp0_iter23_reg;
                line_buffer_l1_1_addr_reg_1321_pp0_iter25_reg <= line_buffer_l1_1_addr_reg_1321_pp0_iter24_reg;
                pixel_in_1_reg_1206_pp0_iter10_reg <= pixel_in_1_reg_1206_pp0_iter9_reg;
                pixel_in_1_reg_1206_pp0_iter11_reg <= pixel_in_1_reg_1206_pp0_iter10_reg;
                pixel_in_1_reg_1206_pp0_iter12_reg <= pixel_in_1_reg_1206_pp0_iter11_reg;
                pixel_in_1_reg_1206_pp0_iter13_reg <= pixel_in_1_reg_1206_pp0_iter12_reg;
                pixel_in_1_reg_1206_pp0_iter14_reg <= pixel_in_1_reg_1206_pp0_iter13_reg;
                pixel_in_1_reg_1206_pp0_iter15_reg <= pixel_in_1_reg_1206_pp0_iter14_reg;
                pixel_in_1_reg_1206_pp0_iter16_reg <= pixel_in_1_reg_1206_pp0_iter15_reg;
                pixel_in_1_reg_1206_pp0_iter17_reg <= pixel_in_1_reg_1206_pp0_iter16_reg;
                pixel_in_1_reg_1206_pp0_iter18_reg <= pixel_in_1_reg_1206_pp0_iter17_reg;
                pixel_in_1_reg_1206_pp0_iter19_reg <= pixel_in_1_reg_1206_pp0_iter18_reg;
                pixel_in_1_reg_1206_pp0_iter20_reg <= pixel_in_1_reg_1206_pp0_iter19_reg;
                pixel_in_1_reg_1206_pp0_iter21_reg <= pixel_in_1_reg_1206_pp0_iter20_reg;
                pixel_in_1_reg_1206_pp0_iter22_reg <= pixel_in_1_reg_1206_pp0_iter21_reg;
                pixel_in_1_reg_1206_pp0_iter23_reg <= pixel_in_1_reg_1206_pp0_iter22_reg;
                pixel_in_1_reg_1206_pp0_iter24_reg <= pixel_in_1_reg_1206_pp0_iter23_reg;
                pixel_in_1_reg_1206_pp0_iter25_reg <= pixel_in_1_reg_1206_pp0_iter24_reg;
                pixel_in_1_reg_1206_pp0_iter2_reg <= pixel_in_1_reg_1206_pp0_iter1_reg;
                pixel_in_1_reg_1206_pp0_iter3_reg <= pixel_in_1_reg_1206_pp0_iter2_reg;
                pixel_in_1_reg_1206_pp0_iter4_reg <= pixel_in_1_reg_1206_pp0_iter3_reg;
                pixel_in_1_reg_1206_pp0_iter5_reg <= pixel_in_1_reg_1206_pp0_iter4_reg;
                pixel_in_1_reg_1206_pp0_iter6_reg <= pixel_in_1_reg_1206_pp0_iter5_reg;
                pixel_in_1_reg_1206_pp0_iter7_reg <= pixel_in_1_reg_1206_pp0_iter6_reg;
                pixel_in_1_reg_1206_pp0_iter8_reg <= pixel_in_1_reg_1206_pp0_iter7_reg;
                pixel_in_1_reg_1206_pp0_iter9_reg <= pixel_in_1_reg_1206_pp0_iter8_reg;
                pixel_in_2_reg_1211_pp0_iter10_reg <= pixel_in_2_reg_1211_pp0_iter9_reg;
                pixel_in_2_reg_1211_pp0_iter11_reg <= pixel_in_2_reg_1211_pp0_iter10_reg;
                pixel_in_2_reg_1211_pp0_iter12_reg <= pixel_in_2_reg_1211_pp0_iter11_reg;
                pixel_in_2_reg_1211_pp0_iter13_reg <= pixel_in_2_reg_1211_pp0_iter12_reg;
                pixel_in_2_reg_1211_pp0_iter14_reg <= pixel_in_2_reg_1211_pp0_iter13_reg;
                pixel_in_2_reg_1211_pp0_iter15_reg <= pixel_in_2_reg_1211_pp0_iter14_reg;
                pixel_in_2_reg_1211_pp0_iter16_reg <= pixel_in_2_reg_1211_pp0_iter15_reg;
                pixel_in_2_reg_1211_pp0_iter17_reg <= pixel_in_2_reg_1211_pp0_iter16_reg;
                pixel_in_2_reg_1211_pp0_iter18_reg <= pixel_in_2_reg_1211_pp0_iter17_reg;
                pixel_in_2_reg_1211_pp0_iter19_reg <= pixel_in_2_reg_1211_pp0_iter18_reg;
                pixel_in_2_reg_1211_pp0_iter20_reg <= pixel_in_2_reg_1211_pp0_iter19_reg;
                pixel_in_2_reg_1211_pp0_iter21_reg <= pixel_in_2_reg_1211_pp0_iter20_reg;
                pixel_in_2_reg_1211_pp0_iter22_reg <= pixel_in_2_reg_1211_pp0_iter21_reg;
                pixel_in_2_reg_1211_pp0_iter23_reg <= pixel_in_2_reg_1211_pp0_iter22_reg;
                pixel_in_2_reg_1211_pp0_iter24_reg <= pixel_in_2_reg_1211_pp0_iter23_reg;
                pixel_in_2_reg_1211_pp0_iter25_reg <= pixel_in_2_reg_1211_pp0_iter24_reg;
                pixel_in_2_reg_1211_pp0_iter2_reg <= pixel_in_2_reg_1211_pp0_iter1_reg;
                pixel_in_2_reg_1211_pp0_iter3_reg <= pixel_in_2_reg_1211_pp0_iter2_reg;
                pixel_in_2_reg_1211_pp0_iter4_reg <= pixel_in_2_reg_1211_pp0_iter3_reg;
                pixel_in_2_reg_1211_pp0_iter5_reg <= pixel_in_2_reg_1211_pp0_iter4_reg;
                pixel_in_2_reg_1211_pp0_iter6_reg <= pixel_in_2_reg_1211_pp0_iter5_reg;
                pixel_in_2_reg_1211_pp0_iter7_reg <= pixel_in_2_reg_1211_pp0_iter6_reg;
                pixel_in_2_reg_1211_pp0_iter8_reg <= pixel_in_2_reg_1211_pp0_iter7_reg;
                pixel_in_2_reg_1211_pp0_iter9_reg <= pixel_in_2_reg_1211_pp0_iter8_reg;
                pixel_in_3_reg_1216_pp0_iter10_reg <= pixel_in_3_reg_1216_pp0_iter9_reg;
                pixel_in_3_reg_1216_pp0_iter11_reg <= pixel_in_3_reg_1216_pp0_iter10_reg;
                pixel_in_3_reg_1216_pp0_iter12_reg <= pixel_in_3_reg_1216_pp0_iter11_reg;
                pixel_in_3_reg_1216_pp0_iter13_reg <= pixel_in_3_reg_1216_pp0_iter12_reg;
                pixel_in_3_reg_1216_pp0_iter14_reg <= pixel_in_3_reg_1216_pp0_iter13_reg;
                pixel_in_3_reg_1216_pp0_iter15_reg <= pixel_in_3_reg_1216_pp0_iter14_reg;
                pixel_in_3_reg_1216_pp0_iter16_reg <= pixel_in_3_reg_1216_pp0_iter15_reg;
                pixel_in_3_reg_1216_pp0_iter17_reg <= pixel_in_3_reg_1216_pp0_iter16_reg;
                pixel_in_3_reg_1216_pp0_iter18_reg <= pixel_in_3_reg_1216_pp0_iter17_reg;
                pixel_in_3_reg_1216_pp0_iter19_reg <= pixel_in_3_reg_1216_pp0_iter18_reg;
                pixel_in_3_reg_1216_pp0_iter20_reg <= pixel_in_3_reg_1216_pp0_iter19_reg;
                pixel_in_3_reg_1216_pp0_iter21_reg <= pixel_in_3_reg_1216_pp0_iter20_reg;
                pixel_in_3_reg_1216_pp0_iter22_reg <= pixel_in_3_reg_1216_pp0_iter21_reg;
                pixel_in_3_reg_1216_pp0_iter23_reg <= pixel_in_3_reg_1216_pp0_iter22_reg;
                pixel_in_3_reg_1216_pp0_iter24_reg <= pixel_in_3_reg_1216_pp0_iter23_reg;
                pixel_in_3_reg_1216_pp0_iter25_reg <= pixel_in_3_reg_1216_pp0_iter24_reg;
                pixel_in_3_reg_1216_pp0_iter2_reg <= pixel_in_3_reg_1216_pp0_iter1_reg;
                pixel_in_3_reg_1216_pp0_iter3_reg <= pixel_in_3_reg_1216_pp0_iter2_reg;
                pixel_in_3_reg_1216_pp0_iter4_reg <= pixel_in_3_reg_1216_pp0_iter3_reg;
                pixel_in_3_reg_1216_pp0_iter5_reg <= pixel_in_3_reg_1216_pp0_iter4_reg;
                pixel_in_3_reg_1216_pp0_iter6_reg <= pixel_in_3_reg_1216_pp0_iter5_reg;
                pixel_in_3_reg_1216_pp0_iter7_reg <= pixel_in_3_reg_1216_pp0_iter6_reg;
                pixel_in_3_reg_1216_pp0_iter8_reg <= pixel_in_3_reg_1216_pp0_iter7_reg;
                pixel_in_3_reg_1216_pp0_iter9_reg <= pixel_in_3_reg_1216_pp0_iter8_reg;
                pixel_in_4_reg_1223_pp0_iter10_reg <= pixel_in_4_reg_1223_pp0_iter9_reg;
                pixel_in_4_reg_1223_pp0_iter11_reg <= pixel_in_4_reg_1223_pp0_iter10_reg;
                pixel_in_4_reg_1223_pp0_iter12_reg <= pixel_in_4_reg_1223_pp0_iter11_reg;
                pixel_in_4_reg_1223_pp0_iter13_reg <= pixel_in_4_reg_1223_pp0_iter12_reg;
                pixel_in_4_reg_1223_pp0_iter14_reg <= pixel_in_4_reg_1223_pp0_iter13_reg;
                pixel_in_4_reg_1223_pp0_iter15_reg <= pixel_in_4_reg_1223_pp0_iter14_reg;
                pixel_in_4_reg_1223_pp0_iter16_reg <= pixel_in_4_reg_1223_pp0_iter15_reg;
                pixel_in_4_reg_1223_pp0_iter17_reg <= pixel_in_4_reg_1223_pp0_iter16_reg;
                pixel_in_4_reg_1223_pp0_iter18_reg <= pixel_in_4_reg_1223_pp0_iter17_reg;
                pixel_in_4_reg_1223_pp0_iter19_reg <= pixel_in_4_reg_1223_pp0_iter18_reg;
                pixel_in_4_reg_1223_pp0_iter20_reg <= pixel_in_4_reg_1223_pp0_iter19_reg;
                pixel_in_4_reg_1223_pp0_iter21_reg <= pixel_in_4_reg_1223_pp0_iter20_reg;
                pixel_in_4_reg_1223_pp0_iter22_reg <= pixel_in_4_reg_1223_pp0_iter21_reg;
                pixel_in_4_reg_1223_pp0_iter23_reg <= pixel_in_4_reg_1223_pp0_iter22_reg;
                pixel_in_4_reg_1223_pp0_iter24_reg <= pixel_in_4_reg_1223_pp0_iter23_reg;
                pixel_in_4_reg_1223_pp0_iter25_reg <= pixel_in_4_reg_1223_pp0_iter24_reg;
                pixel_in_4_reg_1223_pp0_iter2_reg <= pixel_in_4_reg_1223_pp0_iter1_reg;
                pixel_in_4_reg_1223_pp0_iter3_reg <= pixel_in_4_reg_1223_pp0_iter2_reg;
                pixel_in_4_reg_1223_pp0_iter4_reg <= pixel_in_4_reg_1223_pp0_iter3_reg;
                pixel_in_4_reg_1223_pp0_iter5_reg <= pixel_in_4_reg_1223_pp0_iter4_reg;
                pixel_in_4_reg_1223_pp0_iter6_reg <= pixel_in_4_reg_1223_pp0_iter5_reg;
                pixel_in_4_reg_1223_pp0_iter7_reg <= pixel_in_4_reg_1223_pp0_iter6_reg;
                pixel_in_4_reg_1223_pp0_iter8_reg <= pixel_in_4_reg_1223_pp0_iter7_reg;
                pixel_in_4_reg_1223_pp0_iter9_reg <= pixel_in_4_reg_1223_pp0_iter8_reg;
                pixel_in_5_reg_1229_pp0_iter10_reg <= pixel_in_5_reg_1229_pp0_iter9_reg;
                pixel_in_5_reg_1229_pp0_iter11_reg <= pixel_in_5_reg_1229_pp0_iter10_reg;
                pixel_in_5_reg_1229_pp0_iter12_reg <= pixel_in_5_reg_1229_pp0_iter11_reg;
                pixel_in_5_reg_1229_pp0_iter13_reg <= pixel_in_5_reg_1229_pp0_iter12_reg;
                pixel_in_5_reg_1229_pp0_iter14_reg <= pixel_in_5_reg_1229_pp0_iter13_reg;
                pixel_in_5_reg_1229_pp0_iter15_reg <= pixel_in_5_reg_1229_pp0_iter14_reg;
                pixel_in_5_reg_1229_pp0_iter16_reg <= pixel_in_5_reg_1229_pp0_iter15_reg;
                pixel_in_5_reg_1229_pp0_iter17_reg <= pixel_in_5_reg_1229_pp0_iter16_reg;
                pixel_in_5_reg_1229_pp0_iter18_reg <= pixel_in_5_reg_1229_pp0_iter17_reg;
                pixel_in_5_reg_1229_pp0_iter19_reg <= pixel_in_5_reg_1229_pp0_iter18_reg;
                pixel_in_5_reg_1229_pp0_iter20_reg <= pixel_in_5_reg_1229_pp0_iter19_reg;
                pixel_in_5_reg_1229_pp0_iter21_reg <= pixel_in_5_reg_1229_pp0_iter20_reg;
                pixel_in_5_reg_1229_pp0_iter22_reg <= pixel_in_5_reg_1229_pp0_iter21_reg;
                pixel_in_5_reg_1229_pp0_iter23_reg <= pixel_in_5_reg_1229_pp0_iter22_reg;
                pixel_in_5_reg_1229_pp0_iter24_reg <= pixel_in_5_reg_1229_pp0_iter23_reg;
                pixel_in_5_reg_1229_pp0_iter25_reg <= pixel_in_5_reg_1229_pp0_iter24_reg;
                pixel_in_5_reg_1229_pp0_iter2_reg <= pixel_in_5_reg_1229_pp0_iter1_reg;
                pixel_in_5_reg_1229_pp0_iter3_reg <= pixel_in_5_reg_1229_pp0_iter2_reg;
                pixel_in_5_reg_1229_pp0_iter4_reg <= pixel_in_5_reg_1229_pp0_iter3_reg;
                pixel_in_5_reg_1229_pp0_iter5_reg <= pixel_in_5_reg_1229_pp0_iter4_reg;
                pixel_in_5_reg_1229_pp0_iter6_reg <= pixel_in_5_reg_1229_pp0_iter5_reg;
                pixel_in_5_reg_1229_pp0_iter7_reg <= pixel_in_5_reg_1229_pp0_iter6_reg;
                pixel_in_5_reg_1229_pp0_iter8_reg <= pixel_in_5_reg_1229_pp0_iter7_reg;
                pixel_in_5_reg_1229_pp0_iter9_reg <= pixel_in_5_reg_1229_pp0_iter8_reg;
                pixel_in_6_reg_1234_pp0_iter10_reg <= pixel_in_6_reg_1234_pp0_iter9_reg;
                pixel_in_6_reg_1234_pp0_iter11_reg <= pixel_in_6_reg_1234_pp0_iter10_reg;
                pixel_in_6_reg_1234_pp0_iter12_reg <= pixel_in_6_reg_1234_pp0_iter11_reg;
                pixel_in_6_reg_1234_pp0_iter13_reg <= pixel_in_6_reg_1234_pp0_iter12_reg;
                pixel_in_6_reg_1234_pp0_iter14_reg <= pixel_in_6_reg_1234_pp0_iter13_reg;
                pixel_in_6_reg_1234_pp0_iter15_reg <= pixel_in_6_reg_1234_pp0_iter14_reg;
                pixel_in_6_reg_1234_pp0_iter16_reg <= pixel_in_6_reg_1234_pp0_iter15_reg;
                pixel_in_6_reg_1234_pp0_iter17_reg <= pixel_in_6_reg_1234_pp0_iter16_reg;
                pixel_in_6_reg_1234_pp0_iter18_reg <= pixel_in_6_reg_1234_pp0_iter17_reg;
                pixel_in_6_reg_1234_pp0_iter19_reg <= pixel_in_6_reg_1234_pp0_iter18_reg;
                pixel_in_6_reg_1234_pp0_iter20_reg <= pixel_in_6_reg_1234_pp0_iter19_reg;
                pixel_in_6_reg_1234_pp0_iter21_reg <= pixel_in_6_reg_1234_pp0_iter20_reg;
                pixel_in_6_reg_1234_pp0_iter22_reg <= pixel_in_6_reg_1234_pp0_iter21_reg;
                pixel_in_6_reg_1234_pp0_iter23_reg <= pixel_in_6_reg_1234_pp0_iter22_reg;
                pixel_in_6_reg_1234_pp0_iter24_reg <= pixel_in_6_reg_1234_pp0_iter23_reg;
                pixel_in_6_reg_1234_pp0_iter25_reg <= pixel_in_6_reg_1234_pp0_iter24_reg;
                pixel_in_6_reg_1234_pp0_iter2_reg <= pixel_in_6_reg_1234_pp0_iter1_reg;
                pixel_in_6_reg_1234_pp0_iter3_reg <= pixel_in_6_reg_1234_pp0_iter2_reg;
                pixel_in_6_reg_1234_pp0_iter4_reg <= pixel_in_6_reg_1234_pp0_iter3_reg;
                pixel_in_6_reg_1234_pp0_iter5_reg <= pixel_in_6_reg_1234_pp0_iter4_reg;
                pixel_in_6_reg_1234_pp0_iter6_reg <= pixel_in_6_reg_1234_pp0_iter5_reg;
                pixel_in_6_reg_1234_pp0_iter7_reg <= pixel_in_6_reg_1234_pp0_iter6_reg;
                pixel_in_6_reg_1234_pp0_iter8_reg <= pixel_in_6_reg_1234_pp0_iter7_reg;
                pixel_in_6_reg_1234_pp0_iter9_reg <= pixel_in_6_reg_1234_pp0_iter8_reg;
                tmp_reg_1202_pp0_iter10_reg <= tmp_reg_1202_pp0_iter9_reg;
                tmp_reg_1202_pp0_iter11_reg <= tmp_reg_1202_pp0_iter10_reg;
                tmp_reg_1202_pp0_iter12_reg <= tmp_reg_1202_pp0_iter11_reg;
                tmp_reg_1202_pp0_iter13_reg <= tmp_reg_1202_pp0_iter12_reg;
                tmp_reg_1202_pp0_iter14_reg <= tmp_reg_1202_pp0_iter13_reg;
                tmp_reg_1202_pp0_iter15_reg <= tmp_reg_1202_pp0_iter14_reg;
                tmp_reg_1202_pp0_iter16_reg <= tmp_reg_1202_pp0_iter15_reg;
                tmp_reg_1202_pp0_iter17_reg <= tmp_reg_1202_pp0_iter16_reg;
                tmp_reg_1202_pp0_iter18_reg <= tmp_reg_1202_pp0_iter17_reg;
                tmp_reg_1202_pp0_iter19_reg <= tmp_reg_1202_pp0_iter18_reg;
                tmp_reg_1202_pp0_iter20_reg <= tmp_reg_1202_pp0_iter19_reg;
                tmp_reg_1202_pp0_iter21_reg <= tmp_reg_1202_pp0_iter20_reg;
                tmp_reg_1202_pp0_iter22_reg <= tmp_reg_1202_pp0_iter21_reg;
                tmp_reg_1202_pp0_iter23_reg <= tmp_reg_1202_pp0_iter22_reg;
                tmp_reg_1202_pp0_iter24_reg <= tmp_reg_1202_pp0_iter23_reg;
                tmp_reg_1202_pp0_iter25_reg <= tmp_reg_1202_pp0_iter24_reg;
                tmp_reg_1202_pp0_iter2_reg <= tmp_reg_1202_pp0_iter1_reg;
                tmp_reg_1202_pp0_iter3_reg <= tmp_reg_1202_pp0_iter2_reg;
                tmp_reg_1202_pp0_iter4_reg <= tmp_reg_1202_pp0_iter3_reg;
                tmp_reg_1202_pp0_iter5_reg <= tmp_reg_1202_pp0_iter4_reg;
                tmp_reg_1202_pp0_iter6_reg <= tmp_reg_1202_pp0_iter5_reg;
                tmp_reg_1202_pp0_iter7_reg <= tmp_reg_1202_pp0_iter6_reg;
                tmp_reg_1202_pp0_iter8_reg <= tmp_reg_1202_pp0_iter7_reg;
                tmp_reg_1202_pp0_iter9_reg <= tmp_reg_1202_pp0_iter8_reg;
                trunc_ln113_reg_1239_pp0_iter2_reg <= trunc_ln113_reg_1239_pp0_iter1_reg;
                trunc_ln113_reg_1239_pp0_iter3_reg <= trunc_ln113_reg_1239_pp0_iter2_reg;
                trunc_ln113_reg_1239_pp0_iter4_reg <= trunc_ln113_reg_1239_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                pixel_in_1_reg_1206_pp0_iter1_reg <= pixel_in_1_reg_1206;
                pixel_in_2_reg_1211_pp0_iter1_reg <= pixel_in_2_reg_1211;
                pixel_in_3_reg_1216_pp0_iter1_reg <= pixel_in_3_reg_1216;
                pixel_in_4_reg_1223_pp0_iter1_reg <= pixel_in_4_reg_1223;
                pixel_in_5_reg_1229_pp0_iter1_reg <= pixel_in_5_reg_1229;
                pixel_in_6_reg_1234_pp0_iter1_reg <= pixel_in_6_reg_1234;
                tmp_reg_1202 <= tmp_nbreadreq_fu_228_p9;
                tmp_reg_1202_pp0_iter1_reg <= tmp_reg_1202;
                trunc_ln113_reg_1239_pp0_iter1_reg <= trunc_ln113_reg_1239;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv3_i_reg_1259 <= grp_fu_372_p1;
                conv_i_reg_1254 <= grp_fu_369_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv6_i_reg_1279 <= grp_fu_375_p1;
                mul4_i_reg_1274 <= grp_fu_359_p2;
                mul_i_reg_1269 <= grp_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_67_fu_184 <= empty_70_fu_204;
                empty_68_fu_188 <= empty_71_fu_208;
                empty_69_fu_200 <= reuse_select46_fu_597_p3;
                empty_70_fu_204 <= trunc_ln65_fu_615_p1;
                empty_71_fu_208 <= val_fu_729_p3;
                empty_fu_180 <= empty_69_fu_200;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter24_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_1359 <= grp_sqrt_fixed_32_32_s_fu_338_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1))) then
                pixel_in_1_reg_1206 <= in_r_TKEEP_int_regslice;
                pixel_in_2_reg_1211 <= in_r_TSTRB_int_regslice;
                pixel_in_3_reg_1216 <= in_r_TUSER_int_regslice;
                pixel_in_4_reg_1223 <= in_r_TLAST_int_regslice;
                pixel_in_5_reg_1229 <= in_r_TID_int_regslice;
                pixel_in_6_reg_1234 <= in_r_TDEST_int_regslice;
                trunc_ln113_reg_1239 <= trunc_ln113_fu_446_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1))) then
                q_1_fu_212 <= q_fu_192;
                q_fu_192 <= reuse_select_fu_932_p3;
                r_fu_196 <= q_1_fu_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1202_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln57_2_reg_1342 <= sub_ln57_2_fu_784_p2;
                sub_ln57_5_reg_1348 <= sub_ln57_5_fu_828_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln341_fu_655_p2 <= std_logic_vector(unsigned(zext_ln341_fu_651_p1) + unsigned(ap_const_lv9_181));
    add_ln57_1_fu_760_p2 <= std_logic_vector(unsigned(add_ln57_fu_754_p2) + unsigned(reuse_select46_fu_597_p3));
    add_ln57_2_fu_804_p2 <= std_logic_vector(unsigned(shl_ln57_2_fu_796_p3) + unsigned(sub_ln57_3_fu_790_p2));
    add_ln57_3_fu_822_p2 <= std_logic_vector(unsigned(empty_68_fu_188) + unsigned(sub_ln57_4_fu_816_p2));
    add_ln57_fu_754_p2 <= std_logic_vector(unsigned(shl_ln57_fu_748_p2) + unsigned(empty_fu_180));
    addr_cmp39_fu_506_p2 <= "1" when (reuse_addr_reg36_fu_156 = zext_ln116_fu_487_p1) else "0";
    addr_cmp45_fu_497_p2 <= "1" when (reuse_addr_reg42_fu_148 = zext_ln116_fu_487_p1) else "0";
    addr_cmp_fu_525_p2 <= "1" when (reuse_addr_reg_fu_164 = zext_ln116_fu_487_p1) else "0";
    and_ln132_1_fu_969_p2 <= (icmp_ln132_3_fu_963_p2 and icmp_ln132_2_fu_957_p2);
    and_ln132_fu_943_p2 <= (icmp_ln132_reg_1332_pp0_iter25_reg and icmp_ln132_1_reg_1337_pp0_iter25_reg);
    and_ln82_fu_915_p2 <= (xor_ln82_fu_897_p2 and xor_ln82_1_fu_909_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, tmp_nbreadreq_fu_228_p9, tmp_reg_1202_pp0_iter25_reg, regslice_both_out_V_data_V_U_apdone_blk, ap_loop_exit_ready_pp0_iter26_reg, ap_start_int, in_r_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((out_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and ((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)))) or ((ap_start_int = ap_const_logic_1) and (in_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, tmp_nbreadreq_fu_228_p9, tmp_reg_1202_pp0_iter25_reg, regslice_both_out_V_data_V_U_apdone_blk, ap_block_state27_io, ap_loop_exit_ready_pp0_iter26_reg, ap_start_int, in_r_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((out_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state27_io) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)))) or ((ap_start_int = ap_const_logic_1) and (in_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp217_assign_proc : process(ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, tmp_nbreadreq_fu_228_p9, tmp_reg_1202_pp0_iter25_reg, regslice_both_out_V_data_V_U_apdone_blk, ap_block_state27_io, ap_loop_exit_ready_pp0_iter26_reg, ap_start_int, in_r_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp217 <= (((out_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state27_io) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)))) or ((ap_start_int = ap_const_logic_1) and (in_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, tmp_nbreadreq_fu_228_p9, tmp_reg_1202_pp0_iter25_reg, regslice_both_out_V_data_V_U_apdone_blk, ap_block_state27_io, ap_loop_exit_ready_pp0_iter26_reg, ap_start_int, in_r_TVALID_int_regslice, out_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((out_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_1) and (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state27_io) or (regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)))) or ((ap_start_int = ap_const_logic_1) and (in_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_228_p9, in_r_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((in_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call89_assign_proc : process(tmp_nbreadreq_fu_228_p9, in_r_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call89 <= ((in_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1));
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(tmp_reg_1202_pp0_iter25_reg, out_r_TREADY_int_regslice)
    begin
                ap_block_state27_io <= ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1));
    end process;


    ap_block_state27_pp0_stage0_iter26_assign_proc : process(tmp_reg_1202_pp0_iter25_reg, regslice_both_out_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state27_pp0_stage0_iter26 <= ((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)));
    end process;


    ap_block_state27_pp0_stage0_iter26_ignore_call89_assign_proc : process(tmp_reg_1202_pp0_iter25_reg, regslice_both_out_V_data_V_U_apdone_blk, out_r_TREADY_int_regslice)
    begin
                ap_block_state27_pp0_stage0_iter26_ignore_call89 <= ((regslice_both_out_V_data_V_U_apdone_blk = ap_const_logic_1) or ((out_r_TREADY_int_regslice = ap_const_logic_0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)));
    end process;


    ap_block_state28_pp0_stage0_iter27_assign_proc : process(out_r_TREADY_int_regslice)
    begin
                ap_block_state28_pp0_stage0_iter27 <= (out_r_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state28_pp0_stage0_iter27_ignore_call89_assign_proc : process(out_r_TREADY_int_regslice)
    begin
                ap_block_state28_pp0_stage0_iter27_ignore_call89 <= (out_r_TREADY_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call89 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1080_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_start_int)
    begin
                ap_condition_1080 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_228_p9, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter26_stage0_assign_proc : process(ap_enable_reg_pp0_iter26, tmp_reg_1202_pp0_iter25_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter26_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter26_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_loop_exit_ready_pp0_iter26_reg, ap_block_pp0_stage0_subdone, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter26_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    data_V_fu_619_p1 <= grp_fu_343_p1;
    data_out_1_fu_983_p3 <= 
        supressed_fu_921_p3 when (and_ln132_fu_943_p2(0) = '1') else 
        select_ln132_fu_975_p3;
    data_out_2_fu_991_p2 <= "1" when (unsigned(data_out_1_fu_983_p3) > unsigned(ap_const_lv16_50)) else "0";

    grp_fu_343_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_343_ce <= ap_const_logic_1;
        else 
            grp_fu_343_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_346_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_346_ce <= ap_const_logic_1;
        else 
            grp_fu_346_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_350_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_350_ce <= ap_const_logic_1;
        else 
            grp_fu_350_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_354_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_354_ce <= ap_const_logic_1;
        else 
            grp_fu_354_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_359_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_359_ce <= ap_const_logic_1;
        else 
            grp_fu_359_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_364_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_364_ce <= ap_const_logic_1;
        else 
            grp_fu_364_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_369_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_369_ce <= ap_const_logic_1;
        else 
            grp_fu_369_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_369_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_450_p4),32));

    grp_fu_372_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_372_ce <= ap_const_logic_1;
        else 
            grp_fu_372_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_372_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln14_1_fu_465_p4),32));

    grp_fu_375_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_375_ce <= ap_const_logic_1;
        else 
            grp_fu_375_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_375_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln113_reg_1239_pp0_iter4_reg),32));

    grp_sqrt_fixed_32_32_s_fu_338_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp217)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp217))) then 
            grp_sqrt_fixed_32_32_s_fu_338_ap_ce <= ap_const_logic_1;
        else 
            grp_sqrt_fixed_32_32_s_fu_338_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sqrt_fixed_32_32_s_fu_338_x <= std_logic_vector(unsigned(mul_ln122_1_fu_868_p2) + unsigned(mul_ln122_fu_864_p2));
    i_2_fu_564_p3 <= 
        ap_const_lv32_0 when (pixel_in_3_reg_1216_pp0_iter18_reg(0) = '1') else 
        i_fu_558_p2;
    i_fu_558_p2 <= std_logic_vector(unsigned(i_1_fu_176) + unsigned(ap_const_lv32_1));
    icmp_ln132_1_fu_552_p2 <= "1" when (signed(i_1_fu_176) < signed(ap_const_lv32_4FF)) else "0";
    icmp_ln132_2_fu_957_p2 <= "1" when (signed(tmp_48_fu_947_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln132_3_fu_963_p2 <= "1" when (signed(j_fu_172) < signed(ap_const_lv32_2CF)) else "0";
    icmp_ln132_fu_546_p2 <= "1" when (signed(tmp_47_fu_536_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln82_1_fu_903_p2 <= "1" when (unsigned(q_1_fu_212) < unsigned(r_fu_196)) else "0";
    icmp_ln82_fu_891_p2 <= "1" when (unsigned(q_1_fu_212) < unsigned(q_fu_192)) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_228_p9, ap_block_pp0_stage0, ap_start_int, in_r_TVALID_int_regslice)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int_regslice;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= regslice_both_in_V_data_V_U_ack_in;

    in_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_228_p9, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_228_p9 = ap_const_lv1_1))) then 
            in_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_661_p3 <= add_ln341_fu_655_p2(8 downto 8);
    j_1_fu_1052_p2 <= std_logic_vector(unsigned(j_fu_172) + unsigned(ap_const_lv32_1));
    j_2_fu_1058_p3 <= 
        j_1_fu_1052_p2 when (pixel_in_3_reg_1216_pp0_iter25_reg(0) = '1') else 
        j_fu_172;
    j_3_fu_1065_p3 <= 
        ap_const_lv32_0 when (pixel_in_4_reg_1223_pp0_iter25_reg(0) = '1') else 
        j_2_fu_1058_p3;
    line_buffer_0_address0 <= zext_ln116_fu_487_p1(11 - 1 downto 0);

    line_buffer_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_0_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_we1_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001, tmp_reg_1202_pp0_iter19_reg)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_0_we1 <= ap_const_logic_1;
        else 
            line_buffer_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_address0 <= zext_ln116_fu_487_p1(11 - 1 downto 0);

    line_buffer_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_we1_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001, tmp_reg_1202_pp0_iter19_reg)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_reg_1202_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_l1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_l1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_l1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_l1_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_l1_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_l1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_l1_1_we1_assign_proc : process(ap_enable_reg_pp0_iter26, tmp_reg_1202_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1))) then 
            line_buffer_l1_1_we1 <= ap_const_logic_1;
        else 
            line_buffer_l1_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mantissa_fu_637_p4 <= ((ap_const_lv1_1 & tmp_52_fu_633_p1) & ap_const_lv1_0);
    or_ln141_fu_1021_p2 <= (tmp_49_fu_1013_p3 or select_ln141_fu_1005_p3);

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, tmp_reg_1202_pp0_iter25_reg, ap_block_pp0_stage0, out_r_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int_regslice;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln140_fu_1043_p1),32));
    out_r_TVALID <= regslice_both_out_V_data_V_U_vld_out;

    out_r_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter26, tmp_reg_1202_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1202_pp0_iter25_reg = ap_const_lv1_1))) then 
            out_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    pixel_out_data_V_fu_1035_p3 <= (select_ln141_1_fu_1027_p3 & or_ln141_fu_1021_p2);
    r_V_1_fu_701_p2 <= std_logic_vector(shift_left(unsigned(zext_ln68_fu_647_p1),to_integer(unsigned('0' & zext_ln1340_fu_691_p1(31-1 downto 0)))));
    r_V_fu_695_p2 <= std_logic_vector(shift_right(unsigned(zext_ln68_fu_647_p1),to_integer(unsigned('0' & zext_ln1340_fu_691_p1(31-1 downto 0)))));
    reuse_select40_fu_607_p3 <= 
        reuse_reg35_fu_160 when (addr_cmp39_reg_1316(0) = '1') else 
        line_buffer_1_q0;
    reuse_select46_fu_597_p3 <= 
        reuse_reg41_fu_152 when (addr_cmp45_reg_1305(0) = '1') else 
        line_buffer_0_q0;
    reuse_select_fu_932_p3 <= 
        reuse_reg_fu_168 when (addr_cmp_reg_1327_pp0_iter25_reg(0) = '1') else 
        line_buffer_l1_1_q0;
    select_ln130_fu_997_p3 <= 
        ap_const_lv8_FF when (data_out_2_fu_991_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln132_fu_975_p3 <= 
        supressed_fu_921_p3 when (and_ln132_1_fu_969_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln141_1_fu_1027_p3 <= 
        ap_const_lv1_1 when (data_out_2_fu_991_p2(0) = '1') else 
        ap_const_lv1_0;
    select_ln141_fu_1005_p3 <= 
        ap_const_lv16_FF00 when (data_out_2_fu_991_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln1340_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_679_p3),32));

        sext_ln1364_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1364_fu_669_p2),9));

        sext_ln140_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pixel_out_data_V_fu_1035_p3),24));

    shl_ln57_1_fu_772_p2 <= std_logic_vector(shift_left(unsigned(empty_71_fu_208),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln57_2_fu_796_p3 <= (empty_67_fu_184 & ap_const_lv1_0);
    shl_ln57_3_fu_810_p2 <= std_logic_vector(shift_left(unsigned(reuse_select40_fu_607_p3),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln57_fu_748_p2 <= std_logic_vector(shift_left(unsigned(empty_69_fu_200),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    sub_ln1364_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_51_fu_623_p4));
    sub_ln57_1_fu_778_p2 <= std_logic_vector(unsigned(sub_ln57_fu_766_p2) - unsigned(shl_ln57_1_fu_772_p2));
    sub_ln57_2_fu_784_p2 <= std_logic_vector(unsigned(sub_ln57_1_fu_778_p2) - unsigned(val_fu_729_p3));
    sub_ln57_3_fu_790_p2 <= std_logic_vector(unsigned(empty_fu_180) - unsigned(reuse_select46_fu_597_p3));
    sub_ln57_4_fu_816_p2 <= std_logic_vector(unsigned(add_ln57_2_fu_804_p2) - unsigned(shl_ln57_3_fu_810_p2));
    sub_ln57_5_fu_828_p2 <= std_logic_vector(unsigned(add_ln57_3_fu_822_p2) - unsigned(val_fu_729_p3));
    sub_ln57_fu_766_p2 <= std_logic_vector(unsigned(add_ln57_1_fu_760_p2) - unsigned(empty_68_fu_188));
    supressed_fu_921_p3 <= 
        q_1_fu_212 when (and_ln82_fu_915_p2(0) = '1') else 
        ap_const_lv16_0;
    tmp_46_fu_707_p3 <= r_V_fu_695_p2(24 downto 24);
    tmp_47_fu_536_p4 <= i_1_fu_176(31 downto 1);
    tmp_48_fu_947_p4 <= j_fu_172(31 downto 1);
    tmp_49_fu_1013_p3 <= (ap_const_lv8_0 & select_ln130_fu_997_p3);
    tmp_51_fu_623_p4 <= data_V_fu_619_p1(30 downto 23);
    tmp_52_fu_633_p1 <= data_V_fu_619_p1(23 - 1 downto 0);
    tmp_nbreadreq_fu_228_p9 <= (0=>(in_r_TVALID_int_regslice), others=>'-');
    tmp_s_fu_719_p4 <= r_V_1_fu_701_p2(55 downto 24);
    trunc_ln113_fu_446_p1 <= in_r_TDATA_int_regslice(8 - 1 downto 0);
    trunc_ln14_1_fu_465_p4 <= in_r_TDATA_int_regslice(15 downto 8);
    trunc_ln1_fu_450_p4 <= in_r_TDATA_int_regslice(23 downto 16);
    trunc_ln65_fu_615_p1 <= reuse_select40_fu_607_p3(31 - 1 downto 0);
    ush_fu_679_p3 <= 
        sext_ln1364_fu_675_p1 when (isNeg_fu_661_p3(0) = '1') else 
        add_ln341_fu_655_p2;
    val_fu_729_p3 <= 
        zext_ln671_fu_715_p1 when (isNeg_fu_661_p3(0) = '1') else 
        tmp_s_fu_719_p4;
    xor_ln82_1_fu_909_p2 <= (icmp_ln82_1_fu_903_p2 xor ap_const_lv1_1);
    xor_ln82_fu_897_p2 <= (icmp_ln82_fu_891_p2 xor ap_const_lv1_1);
    zext_ln116_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_176),64));
    zext_ln1340_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1340_fu_687_p1),79));
    zext_ln341_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_623_p4),9));
    zext_ln671_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_707_p3),32));
    zext_ln68_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_637_p4),79));
end behav;
